// ---
// description: A library for the exploration of Michael Gerzon's algorithms
// ---
//
// <!-- LICENSE: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007-->
//
// # gerzon.lib
//
// * EARLY WORKS
// * A B MODULES
// * ENCODERS
// * DECODERS
// * TOOLS
//
// ## MICHAEL GERZON EARLY WORKS
//
// ### 1970 - SURROUND SOUND FROM 2-CHANNEL STEREO - SUM-AND-DIFFERENCE LAYOUT
//
// > ... a method of obtaining a genuine surround stereo effect from suitable conventional two-channel stereo recordings
//
// #### Reference
//
// * [Surround sound from 2-channel stereo - Hi-Fi News, August 1970](https://github.com/s-e-a-m/References/blob/master/Gerzon-Michael/1970-GERZON-Surround_sound_from_2-channel_stereo_A4.pdf)
// * [A year of surround-sound - Hi-Fi News, August 1971](https://github.com/s-e-a-m/References/blob/master/Gerzon-Michael/1971-GERZON-A_year_of_surround_sound_A4.pdf)
//
// ```text
//         F
//      •  |  •
//   •     |     •
// L ----- + ----- R
//   •     |     •
//      •  |  •
//         B
// ```
//
// Where the four outpust are respectively: Left - Right - Front - Back
//
// #### Code
//
// ```text
lr2surr(L,R) = F,R,B,L
  with{
    F = 0.707 * (L + R);
    B = 0.707 * (L - R);
};
// ```
//
// #### Usage
//
// ```text
// // _,_ : lrfb : _,_,_,_
// process = lfbr;
// ```

//############################################################### gerzon.lib ###
//
// A library for the exploration of Gerzon's algorythms
//
// * EARLY WORKS
// * A B MODULES
// * ENCODERS
// * DECODERS
// * TOOLS
//
//##############################################################################

/*******************************************************************************
Except where noted otherwise, Copyright (C) 2019-2020 by SEAM

GRAME LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with the GNU C Library; if not, write to the Free Software Foundation, Inc., 59
Temple Place, Suite 330, Boston, MA 02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a larger
FAUST program which directly or indirectly imports this library file and still
distribute the compiled code generated by the FAUST compiler, or a modified
version of this compiled code, under your own copyright and license. This
EXCEPTION TO THE LGPL LICENSE explicitly grants you the right to freely choose
the license for the resulting compiled code. In particular the resulting compiled
code has no obligation to be LGPL or GPL. For example you are free to choose a
commercial or closed source license or any other license if you decide so.
*******************************************************************************/

declare name "Michael Gerzon's Faust Library";
declare version "0.1";
declare author "Giuseppe Silvi";
declare license "CC4";

//================================================= MICHAEL GERZON EARLY WORKS =
//==============================================================================
//------------------------------------------------------------------------------
// 1970 - SURROUND SOUND FROM 2-CHANNEL STEREO - SUM-AND-DIFFERENCE LAYOUT
//------------------------------------------------------------------------------
// ... a method of obtaining a genuine surround stereo effect from suitable
// conventional two-channel stereo recordings
//
// #### Reference
// Surround sound from 2-channel stereo - Hi-Fi News, August 1970
// http://www.audiosignal.co.uk/Resources/Surround_sound_from_2-channel_stereo_A4.pdf
//
// A year of surround-sound - Hi-Fi News, August 1971
// http://www.audiosignal.co.uk/Resources/A_year_of_surround_sound_A4.pdf
//
// #### Usage
//
// ```
// _,_ : lr2surr : _,_,_,_
// ```
//
// Where the four outpust are respectively:
// Front,Right,Rear,Left
//
//         F
//      •  |  •
//   •     |     •
// L ----- + ----- R
//   •     |     •
//      •  |  •
//         B
//
//------------------------------------------------------------------------------
lr2surr(L,R) = F,R,B,L
  with{
    F = 0.707 * (L + R);
    B = 0.707 * (L - R);
};

//------------------------------------------------------------------------------
// 1970 - SURROUND SOUND FROM 2-CHANNEL STEREO - IDEAL LS ARRANGEMENT
//------------------------------------------------------------------------------
// Another, more obvious, defect of ‘sum-and-difference’ four-speaker
// reproduction is the highly inconvenient seating arrangements, which are
// hardly suitable for the cosy domestic enjoyment of music.
//
// #### Reference
// Surround sound from 2-channel stereo - Hi-Fi News, August 1970
// http://www.audiosignal.co.uk/Resources/Surround_sound_from_2-channel_stereo_A4.pdf
//
// A year of surround-sound - Hi-Fi News, August 1971
// http://www.audiosignal.co.uk/Resources/A_year_of_surround_sound_A4.pdf
//
// #### Usage
//
// ```
// _,_ : lr2surr_ls : _,_,_,_
// ```
//
// Where the four outpust are respectively:
// A,B,C,D
//
//  B ---------- C
//  |            |
//  |            |
//  |            |
//  |            |
//  A ---------- D
//
//------------------------------------------------------------------------------
lr2surr_ls(L,R) = A,B,C,D
  with{
    A = L*(0.924) - R*(0.383);
    B = L*(0.924) + R*(0.383);
    C = L*(0.383) + R*(0.924);
    D = L*(-0.383) + R*(0.924);
};

//------------------------------------------------------------------------------
// 1971 - A YEAR OF SURROUND SOUND
//------------------------------------------------------------------------------
// What is the precise effect of the rear spread control? With the few set-ups
// on which it has so far been tried, as one turns the control away from the
// pure ‘Hafler’ system, the sound seems to gain a subtle life and depth that
// the Hafler system lacks.
//
// #### Reference
//
// A year of surround-sound - Hi-Fi News, August 1971
// http://www.audiosignal.co.uk/Resources/A_year_of_surround_sound_A4.pdf
//
// #### Usage
//
// ```
// _,_ : lr2surr_rs : _,_,_,_
// ```
//
// Where:
// * suffix _rs is Rear Spread
// * k is a number bettween 0.5 and 1.0
//
//  L ---------- R
//  |            |
//  |            |
//  |            |
//  |            |
//  kL -------- kR
//
//------------------------------------------------------------------------------
lr2surr_rs(L,R,k) = L,R,kL,kR
  with{
    kL = k * L - (1 - k) * R;
    kR = k * R - (1 - k) * L;
};

//================================================================ A B MODULES =
//==============================================================================
//------------------------------------------------------------------------------
// GENERIC AB MODULE WITHOUT SHELVING
//------------------------------------------------------------------------------
// Converts a generic tetrahedral A-Format into Firts Order B-Format
//
// #### Reference
// Ambisonics. Part two: Studio techniques
// Studio Sound, Vol. 17, pp 24-26, 28, 40 (August 1975)
// https://www.michaelgerzonphotos.org.uk/articles/Ambisonics%202.pdf
//
// #### Usage
//
// ```
// _,_,_,_ : abmodule : _,_,_,_
// ```
//
// Where the four outpust are respectively:
// W,X,Y,Z
//
//------------------------------------------------------------------------------
abmodule(LFU,RFD,RBU,LBD) = W,X,Y,Z
	with{
    W = (0.5 * (LFU + RFD + RBU + LBD));
	  X = (0.5 * (LFU + RFD - RBU - LBD));
	  Y = (0.5 * (LFU - RFD - RBU + LBD));
	  Z = (0.5 * (LFU - RFD + RBU - LBD));
};

//------------------------------------------------------------------------------
// GENERIC BA MODULE WITHOUT SHELVING
//------------------------------------------------------------------------------
// Converts Firts Order B-Format into a generic tetrahedral A-Format
//
// #### Reference
//
// #### Usage
//
// ```
// _,_,_,_ : bamodule : _,_,_,_
// ```
//
// Where the four outpust are respectively:
// W,X,Y,Z
//
//------------------------------------------------------------------------------
bamodule(W, X, Y, Z) = LFU,RFD,RBU,LBD
  with{
	  LFU = 0.5 * (W + X + Y + Z);
	  RFD = 0.5 * (W + X - Y - Z);
	  RBU = 0.5 * (W - X - Y + Z);
    LBD = 0.5 * (W - X - Y - Z);
};

//=================================================================== ENCODERS =
//==============================================================================
//------------------------------------------------------------------------------
// MONO TO FIRST ORDER B-FORMAT ENCODER
//------------------------------------------------------------------------------
// Mono Encoder into Firts Order B-Format
//
// #### Reference
//
// 1975 - Ambisonics. Part two: Studio techniques
// Reproduced from Studio Sound, Vol. 17, pp 24-26, 28, 40 (August 1975), by
// permission of IPC Media Ltd, publishers of Hi-Fi News (www.hifinews.co.uk)
//
// #### Usage
//
// ```
// _ : m2bfmt(16,23) : _,_,_,_
// ```
//
// where
// * x is a mono signal
// * azi is orizontal angle in radians
// * elv is elevation angle in radians
//
// Where the four outpust are respectively:
// W,X,Y,Z
//
//------------------------------------------------------------------------------
m2bfmt(azi,elv) = _<:bfmt
  with{
    d2r = *(ma.PI/180);
    W = _*(1/sqrt(2));
    X = _*cos(d2r(azi))*cos(d2r(elv));
    Y = _*sin(d2r(azi))*cos(d2r(elv));
    Z = _*sin(d2r(elv));
    bfmt = W,X,Y,Z;
};

//------------------------------------------------------------------------------
// STEREO TO FIRST ORDER B-FORMAT ENCODER
//------------------------------------------------------------------------------
// Converts a Stereo stream into Firts Order B-Format
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : lr2bfmt : _,_,_,_
// ```
//
// Where the two inputs are respectively:
// L,R
//
// Where the four outpust are respectively:
// W,X,Y,Z
//
//------------------------------------------------------------------------------
lr2bfmt(L,R) = W,X,Y,Z
  with{
    azi = 45.0 : deg2rad;
    elv = 00.0 : deg2rad;

    WL = L * 0.707;
    XL = L * cos(azi) * cos(elv);
    YL = L * sin(azi) * cos(elv);
    ZL = L * sin(elv);

    WR = R * 0.707;
    XR = R * cos(-azi) * cos(elv);
    YR = R * sin(-azi) * cos(elv);
    ZR = R * sin(elv);

    W = 0.707 * (WL + WR);
    X = 0.707 * (XL + XR);
    Y = 0.707 * (YL + YR);
    Z = 0.707 * (ZL + ZR);
};

//=================================================================== DECODERS =
//==============================================================================
//------------------------------------------------------------------------------
// PLANAR THREE CHANNEL B-FORMAT TO FOUR LOUDSPEAKER DECODER
//------------------------------------------------------------------------------
// Converts planar B-Format to four loudspeaker setup for horizontal studio
// monitoring
//
// #### Reference
// Ambisonics. Part two: Studio techniques
// Studio Sound, Vol. 17, pp 24-26, 28, 40 (August 1975)
// https://www.michaelgerzonphotos.org.uk/articles/Ambisonics%202.pdf
//
// #### Usage
//
// ```
// _,_,_ : bdmodule : _,_,_,_
// ```
//
// Where the three inputs are respectively:
// W,X,Y
//
// Where the four outpust are respectively:
// LF,RF,RB,LB
//
//------------------------------------------------------------------------------
bdmodule = shelf : bamodule
  with{
    shelf = fi.highshelf(2,1.76,350), fi.highshelf(2,-1.25,350), fi.highshelf(2,-1.25,350), *(0.0);
};

//------------------------------------------------------------------------------
// DECODER FOR BMX ENCODED SIGNALS
//------------------------------------------------------------------------------
// Converts C-Format Stereo BMX encoded signals to four loudspeaker setup
//
// #### Reference
// Ambisonics. Part two: Studio techniques
// Studio Sound, Vol. 17, pp 24-26, 28, 40 (August 1975)
// https://www.michaelgerzonphotos.org.uk/articles/Ambisonics%202.pdf
//
// #### Usage
//
// ```
// _,_ : bmxmodule : _,_,_,_
// ```
//
// Where the two inputs are respectively:
// L,R
//
// Where the four outpust are respectively:
// LF,RF,LB,RB
//
//------------------------------------------------------------------------------
bmxmodule(L,R) = M+S, M, S, 0 : mg.bamodule
  with{
    M = 0.5 * (L + R) : fi.lowshelf(2,-3.98,350);
    S = 0.5 * (L - R) : fi.lowshelf(2,2.04,350);
};

//------------------------------------------------------------------------------
// B-FORMAT TO UHJ LRTQ
//------------------------------------------------------------------------------
// Ambisonic UHJ format is a development of the Ambisonic surround sound system
// designed to be compatible with mono and stereo media.
//
// #### Reference
// https://en.wikipedia.org/wiki/Ambisonic_UHJ_format
//
// S = 0.9396926*W + 0.1855740*X
// D = j(-0.3420201*W + 0.5098604*X) + 0.6554516*Y
//
// Left = (S + D)/2.0
// Right = (S - D)/2.0
// T = j(-0.1432*W + 0.6512*X) - 0.7071*Y
// Q = 0.9772*Z
//
//where j is a +90° phase shift
//
// #### Usage
//
// ```
// _,_,_,_ : bfmt2uhj : _,_,_,_
// ```
//
// where the four inputs are respectively:
// W,X,Y,Z
//
// Where the four outpust are respectively:
// L,R,T,Q
//
//------------------------------------------------------------------------------
bfmt2uhj(W,X,Y,Z) = L,R,T,Q
  with{

j = fi.pospass(128, 300) : !, *(2);

    S = 0.9396926 * W + 0.1855740 * X;
    D = j((-0.3420201 * W) + (0.5098604 * X)) + (0.6554516 * Y);

    L = 0.5 * (S + D);
    R = 0.5 * (S - D);
    T = j((-0.1432 * W + 0.6512 * X)) - (0.7071 * Y);
    Q = 0.9772 * (Z);
};

//------------------------------------------------------------------------------
// FOUR CHANNEL LRTQ UHJ TO B-FORMAT
//------------------------------------------------------------------------------
// Ambisonic UHJ format is a development of the Ambisonic surround sound system
// designed to be compatible with mono and stereo media.
//
// #### Reference
// 1983-gerzon-ambisonic-in-multichannel-broadcasting-and-video
//
// where j is a +90° phase shift
//
// #### Usage
//
// ```
// _,_,_,_ : uhj2bfmt : _,_,_,_
// ```
//
// Where the four inputs are respectively:
// L,R,T,Q
//
// where the four outputs are respectively:
// W,X,Y,Z
//
//------------------------------------------------------------------------------
uhj2bfmt(L,R,T,Q) = W,X,Y,Z
  with{
    j = fi.pospass(128, 35) : *(2), !;
    W = (0.982*L) + j(0.197*((0.828*R)+(0.768*T)));
    X = (0.419*L) - j(0.828*(R+(0.768*T)));
    Y = j(0.187*L) + ((0.796*R)-(0.676*T));
    Z = 1.023 * Q;
};

//====================================================================== TOOLS =
//==============================================================================
//------------------------------------------------------------------------------
// FIRST ORDER B-FORMAT ROTATE
//------------------------------------------------------------------------------
// Rotate the Firts Order B-Format armonics set
//
// #### Reference
//
// #### Usage
//
// ```
// _,_,_,_ : brotate : _,_,_,_
// ```
//
// where
// * azi is orizontal angle in radians
//
//------------------------------------------------------------------------------
brotate(W,X,Y,Z) = W1, X1, Y1, Z1
  with{
    W1 = W;
    X1 = (X) * cos(azi) - Y * sin(azi);
    Y1 = (Y) * cos(azi) - X * sin(azi);
    Z1 = Z;
};

//------------------------------------------------------------------------------
// THREE CHANNEL STEREO
//------------------------------------------------------------------------------
// Three channel pan-pot with low frequency phase correlation
//
// #### Reference
// Studio Sound, June 1990
// http://www.audiosignal.co.uk/Resources/Three_channels_A4.pdf
//
// #### Usage
//
// ```
// _,_ : lcrpan : _,_,_
// ```
//
// Where the first input is the signal to be moved and the second is pot, a number between -0.5 and 0.5
// pot = vslider("[1][style:knob][unit:deg]", 0.0, -45.0, 45.0, 0.1) / (90.0) : si.smoo;
//
// Where the four outpust are respectively:
// Left,Center,Right
//
//------------------------------------------------------------------------------
lrcpan(x,pot) = l,r,c
  with{
    plr = (pot) + (0.5);
    l = x*((1 - (plr)) * (pot) * (-2.0));
    c = x*(cos(pot * ma.PI));
    r = x*((plr) * (pot) * (2.0));
};
