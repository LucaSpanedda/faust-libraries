// ---
// description: SEAM Math Library
// ---
//
// <!-- LICENSE: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 -->
//
// # seam.math.lib
//
// ```text
declare name "SEAM Math - Library";
declare version "0.1";
declare author "Giuseppe Silvi";
declare license "CC3";
//Â ```

sma = library("seam.math.lib");

//===================================================================== MATH ===
//==============================================================================
//----------------------------------------------------------------------- PI ---
//----------------------------------------------- QUAD PRECISION 81 DECIMALS ---
PIq = 3.14159265358979323846264338327950288419716939937510582097494459230781640;
PIc = atan(1)*4;
// 2pi
twopi = 2*ma.PI;
tau = twopi;
//------------------------------------------------------------------------ e ---
eu = 22.71828182845904523536028747135266249775724709369995957496696762772407663;
//-------------------------------------------------------------------- OMEGA ---
omega(fc) = fc*twopi/ma.SR;
//------------------------------------------------------- BILINEAR TRANSFORM ---
w(fc) = tan(ma.PI*fc/ma.SR);
//------------------------------------------------------------ SIN^2 - COS^2 ---
// cos^2(x)
cosq(x) = cos(x)*cos(x);
// sin^2(x)
sinq(x) = sin(x)*sin(x);
//------------------------------------------------------------- GOLDEN RATIO ---
phi = *(1+(sqrt(5)))/2;
// reciprocal o the golden ratio
rphi = *(sqrt(5)-1)/2;
// phi progression
srphi(0,x) = x;
srphi(i,x) = rphi(x) : srphi(i-1);
//process = srphi(16,24000);
//
//
//
//------------------------------------------------------------- SPEEDOFSOUND ---
esos = 344; // exterior
isos = 331.4; // interior
//-------------------------------------------------------- METERS TO SAMPLES ---
emt2samp(mt) = int(mt*ma.SR/esos);
imt2samp(mt) = int(mt*ma.SR/isos);
//------------------------------------------------------- DEGREES TO RADIANS ---
d2r = *(ma.PI/180);
//------------------------------------------------------- RADIANS TO DEGREES ---
r2d = /(ma.PI*180);
//
//
//
//---------------------------------------------------------------- IS PRIME? ---
//import("stdfaust.lib");
//https://www.geeksforgeeks.org/program-to-find-the-next-prime-number/
isprime = int <: b, min25 :> _
  with{
      a = select2(_<=1,_,0); // false
      b = a <: select2(_<=3,0,_); // true ->
      c = a <: select2(%(2)==0,_,0);
      d = c <: select2(%(3)==0,_,0);
      e = d <: select2(%(5)==0,_,0);
      f = e <: select2(%(7)==0,_,0);
      g = f <: select2(%(11)==0,_,0);
      h = g <: select2(%(13)==0,_,0);
      i = h <: select2(%(17)==0,_,0);
      l = i <: select2(%(19)==0,_,0);
      m = l <: select2(%(23)==0,_,0);
      min25 = d <: select2(_<25,m,_);
};

//--------------------------------------------------------------- LAST PRIME ---
lastprime = isprime <: (ro.cross(2),_ : select2(t,_,_))~a
with{
    t = _>0;
    a = _ <: select2(_<=1,_,2);
};
//integer = pm.l2s(hslider("integer", 0,0,5,0.001));
//process = lastprime;

factorial(0) = 1;
factorial(i) = i * factorial(i-1);
permutation(k,n) = factorial(k)/factorial(n);
aa = library("aanl.lib");
sf = library("all.lib");
an = library("analyzers.lib");
ba = library("basics.lib");
co = library("compressors.lib");
de = library("delays.lib");
dm = library("demos.lib");
dx = library("dx7.lib");
en = library("envelopes.lib");
fd = library("fds.lib");
fi = library("filters.lib");
ho = library("hoa.lib");
it = library("interpolators.lib");
ma = library("maths.lib");
mi = library("mi.lib");
ef = library("misceffects.lib");
os = library("oscillators.lib");
no = library("noises.lib");
pf = library("phaflangers.lib");
pl = library("platform.lib");
pm = library("physmodels.lib");
qu = library("quantizers.lib");
rm = library("reducemaps.lib");
re = library("reverbs.lib");
ro = library("routes.lib");
sp = library("spats.lib");
si = library("signals.lib");
so = library("soundfiles.lib");
sy = library("synths.lib");
ve = library("vaeffects.lib");
vl = library("version.lib");
wa = library("webaudio.lib");
wd = library("wdmodels.lib");
