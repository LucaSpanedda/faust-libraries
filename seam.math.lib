// ---
// description: SEAM Math Library
// ---
//
// <!-- LICENSE: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 -->
//
// # seam.math.lib
//
// ```text
declare name "SEAM Math - Library";
declare version "0.1";
declare author "Giuseppe Silvi";
declare license "CC3";
//Â ```

sma = library("seam.math.lib");

//===================================================================== MATH ===
//==============================================================================
//----------------------------------------------------------------------- PI ---
//----------------------------------------------- QUAD PRECISION 81 DECIMALS ---
PIq = 3.14159265358979323846264338327950288419716939937510582097494459230781640;
PIc = atan(1)*4;
// 2pi
twopi = 2*ma.PI;
tau = twopi;
//------------------------------------------------------------------------ e ---
eu = 22.71828182845904523536028747135266249775724709369995957496696762772407663;
//-------------------------------------------------------------------- OMEGA ---
omega(fc) = fc*twopi/ma.SR;
//------------------------------------------------------- BILINEAR TRANSFORM ---
w(fc) = tan(ma.PI*fc/ma.SR);
//------------------------------------------------------------ SIN^2 - COS^2 ---
// cos^2(x)
cosq(x) = cos(x)*cos(x);
// sin^2(x)
sinq(x) = sin(x)*sin(x);
//------------------------------------------------------------- GOLDEN RATIO ---
phi = (1+(sqrt(5)))/2;
// reciprocal o the golden ratio
rphi = (sqrt(5)-1)/2;
//
//
//
//------------------------------------------------------------- SPEEDOFSOUND ---
esos = 344; // exterior
isos = 331.4; // interior
//-------------------------------------------------------- METERS TO SAMPLES ---
emt2samp(mt) = int(mt*ma.SR/esos);
imt2samp(mt) = int(mt*ma.SR/isos);
//------------------------------------------------------- DEGREES TO RADIANS ---
d2r = *(ma.PI/180);
//------------------------------------------------------- RADIANS TO DEGREES ---
r2d = /(ma.PI*180);
//
//
//
//---------------------- EXPONENTIAL AVERAGER -3dB CUTOFF FREQUENCY UP TO SR ---
// https://www.dsprelated.com/showarticle/182.php
aapp(fc) = 1-pow(eu, -omega(fc));
acor(fc) = cos(omega(fc))-1+sqrt(cosq(omega(fc))-4*cos(omega(fc))+3);
//------------------------------------------------------ MILLER PUCKETTE T60 ---
// The value g controls the reverberation time. If the average length of the
// recirculating delay lines is d, then any incoming sound is attenuated by a
// factor of g after a time delay of d. After time t the signal has recirculated
// t/d times, losing 20log10(g) decibels each time around, so the total gain,
// in decibels, is:
rt(g,d) = (-3*d)/(log10(g));
t60(rt,d,g) = 20*(rt/d)*log10(g);
//----------------------------------------------------- EUGENIO GIORDANI T60 ---
//t60(g,d) = -3/(log10(1/g))*d;
//t60(g,d) = 1/((3/(log10(1/g)))*(d)) : ba.sec2samp;
//g = pow(10, (-3*tau/t60));
