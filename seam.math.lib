// ---
// description: SEAM Math Library
// ---
//
// <!-- LICENSE: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 -->
//
// # seam.math.lib
//
// ```text
declare name "SEAM Math - Library";
declare version "0.1";
declare author "Giuseppe Silvi";
declare license "CC3";
//Â ```

//===================================================================== MATH ===
//==============================================================================
//----------------------------------------------------------------------- PI ---
//----------------------------------------------- QUAD PRECISION 81 DECIMALS ---
PIq = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998;
//    3.141592653589793238462643383279502884198716939937510582097164
madPI = atan(1)*4;
// 2pi
twopi = 2*ma.PI;
//
tau = twopi;
// angle / sample rate constant
fac = twopi/ma.SR;
// omega pole angle in radians
omega(fc) = fc*fac;
// cos^2(x)
cosq(x) = cos(x)*cos(x);
// sin^2(x)
sinq(x) = sin(x)*sin(x);
// filter center frequency
fc(f) = 1.0/(tan(ma.PI*(f/ma.SR)));
//------------------------------------------------------------- SPEEDOFSOUND ---
esos = 344; // exterior
isos = 331.4; // interior
//-------------------------------------------------------- METERS TO SAMPLES ---
emt2samp(mt) = int(mt*ma.SR/esos);
imt2samp(mt) = int(mt*ma.SR/isos);
//------------------------------------------------------- DEGREES TO RADIANS ---
d2r = *(ma.PI/180);
//------------------------------------------------------- RADIANS TO DEGREES ---
r2d = /(ma.PI*180);
//------------------------------------------------------- BILINEAR TRANSFORM ---
g(fc) = tan(ma.PI*(fc/ma.SR));
//---------------------------------------------------- -3dB Cutoff Frequency ---
//----------------------------------------------- of an Exponential Averager ---
// https://www.dsprelated.com/showarticle/182.php
aapp(fc) = 1-pow(ma.EPSILON, -omega);
acor(fc) = cos(omega(fc))-1+sqrt(cosq(omega(fc))-4*cos(omega(fc))+3);

//------------------------------------------------------ MILLER PUCKETTE T60 ---
// The value g controls the reverberation time. If the average length of the
// recirculating delay lines is d, then any incoming sound is attenuated by a
// factor of g after a time delay of d. After time t the signal has recirculated
// t/d times, losing 20log10(g) decibels each time around, so the total gain,
// in decibels, is:
rt(g,d) = (-3*d)/(log10(g));
t60(rt,d,g) = 20*(rt/d)*log10(g);
//----------------------------------------------------- EUGENIO GIORDANI T60 ---
t60(g,d) = -3/(log10(1/g))*d;
t60(g,d) = 1/((3/(log10(1/g)))*(d)) : ba.sec2samp;
g = pow(10, (-3*tau/t60))
