// ---
// description: SEAM Math Library
// ---
//
// <!-- LICENSE: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 -->
//
// # gerzon.lib
//
// ```text
declare name "SEAM Filters - Library";
declare version "0.1";
declare author "Giuseppe Silvi";
declare license "CC3";

sfi = library("seam.filters.lib");
sma = library("seam.math.lib");

//================================================================== FILTERS ===
//==============================================================================
//------------------------------------------ COMPUTER MUSIC TUTORIAL ALLPASS ---
cmtap(D,g) = (+ <: de.delay((ma.SR/2),int(D-1)),*(-g)) ~ *(g) : +;
cmtapm(D,g) = (+ <: de.delay((ma.SR/2),int(D-1)),*(-g)) ~ *(g) : mem,_ : +;
//
//----------------------------------------------------- EXPONENTIAL AVERAGER ---
// https://www.dsprelated.com/showarticle/182.php
// > eavga is a two-multiply exponential averager
// > eavgb is a one-multiply exponential averager
// > the two averagers have identical performance
// > used to test acor formula in seam.math.lib
//
// The “app” subscript in Eq. (1) stands for approximation
aapp(fc) = 1-pow(ma.E, 0-sma.omega(fc));
// acor not works below 4Hz at 96KHz
acor(fc) = cos(sma.omega(fc))-1+sqrt(sma.cosq(sma.omega(fc))-4*cos(sma.omega(fc))+3);
// process = eavg(acor);
// process = os.impulse <: eavg(acor(1000)), eavg1(acor(1000));
eavg(a) = *(a) : +~*(1-a);
eavg1(a) = +(+*(a))~z
with{
    z = _<:_,*(-1);
};
//------------------------------------------------- LOW PASS ONE POLE FILTER ---
lp1pa(hz) = eavg(aapp(hz));
lp1pc(hz) = eavg(acor(hz));
// process = no.noise <: sfi.lp1pa(0.5),sfi.lp1pc(4);
//--------------------------------------------------------- HIGH PASS FILTER ---
hp1a(fc) = _<:_-(lp1pa(fc));
hp1c(fc) = _<:_-(lp1pc(fc));
//-------------------------------------------------------- DC BLOCKER AT 5Hz ---
dcblock = _ <: (_- seq(i,4,eavg(acor(5))));
//process = no.pink_noise : dcblock;
//
//------------------------------------------------ 2nd ORDER BANDPASS FILTER ---
//
// fc = hslider("fc",1,1,10000,1) : si.smoo : max(bw/2) ;
// bw = hslider("bw", 0,0,1000,1) : si.smoo;
bp2(fc,bw) = fi.bandpass(1,fc-(bw/2),fc+(bw/2));
// process = no.pink_noise : bp2(fc,bw);
//------------------------------------------ ALL-PASS FILTER COEF CALCULATOR ---
//
// REFERENCES:
// https://www.dsprelated.com/showcode/182.php
//
// The following Matlab function generates allpass coefficients for an IIR
// filter. In this design, the magnitude response is unchanged but the phase
// response is very different. This code only supports 1st order or 2nd order
// variants.
//
// 1st order allpass filters shift the phase by 180 degrees, while the 2nd order
// shifts the phase by 360 degrees. The "center frequency" of Fc defines where
// the phase response should be halfway to the max shift.
//
// For example,
// If order=2 and Fc = 2000Hz, there would be a 180deg shift at 2kHz
// If order=1 and Fc = 5000Hz, there would be a 90deg shift at 5kHz
//
// Returns allpass filter coefficients.
// Currently only 1st and 2nd orders are supported.
// N is the order of the allpass
// FC is the frequency a the 90deg phase shift point
// FS is the sampling rate
// Q is quality factor describing the slope of phase shift
//
// Bilinear transform
// g(fc) = tan(ma.PI*(fc/ma.SR));
//
// process = (ap1coeff(freq,qq) : ap1inspec),
//           (ap2coeff(freq,qq) : ap2inspec) :> _ *(0.00001);
//
ap2coeff(fc,q) = g(fc), b0(fc,q), b1(fc,q), b2, a1(fc,q), a2(fc,q)
with{
  g(fc) = tan(ma.PI*(fc/ma.SR));
  d(q)  = 1/q;
  k(fc,q)  = 1/(1 + (d(q)*g(fc)) + (g(fc)*g(fc)));
  b0(fc,q) = (1 - (g(fc)*d(q)) + (g(fc)*g(fc))) * k(fc,q);
  b1(fc,q) = 2 * ((g(fc)*g(fc)) - 1) * k(fc,q);
  b2 = 1;
  a1 = b1;
  a2 = b0;
};
//
ap1coeff(fc,q) = g(fc), b0(fc,q), b1, b2, a1(fc,q), a2
with{
 g(fc) = tan(ma.PI*(fc/ma.SR));
 b0(fc,q) = (g(fc)-1)/(g(fc)+1);
 b1 = 1;
 b2 = 0;
 a1 = b0;
 a2 = 0;
};
//
//freq = hslider("[01]Center Frequency", 2000,1,24000,1);
//qq = hslider("[02]Q slope", 1,0.01,2,0.001);
//
//graph_g(x) = hgroup("[03]COEFFICIENTS",x);
//ap1inspec = graph_g(vgroup("[01]1st ORDER ALLPASS",
//             hbargraph("[00]g[style:numerical]", 0,10),
//             hbargraph("[01]b0[style:numerical]", -2,2),
//             hbargraph("[02]b1[style:numerical]", -2,2),
//             hbargraph("[03]b2[style:numerical]", -2,2),
//             hbargraph("[04]a1[style:numerical]", -2,2),
//             hbargraph("[05]a2[style:numerical]", -2,2)));
//
// ap2inspec = graph_g(vgroup("[02]2nd ORDER ALLPASS",
//             hbargraph("[00]g[style:numerical]", 0,10),
//             hbargraph("[01]b0[style:numerical]", -2,2),
//             hbargraph("[02]b1[style:numerical]", -2,2),
//             hbargraph("[03]b2[style:numerical]", -2,2),
//             hbargraph("[04]a1[style:numerical]", -2,2),
//             hbargraph("[05]a2[style:numerical]", -2,2)));
//
//------------------------------ SIMPLE RC-FILTER USED INTO SEAM.REVERBS.LIB ---
rcfilter = wd.buildtree(tree_lowpass)
with{
  vs1(i) = wd.u_voltage(i,_);
  r1(i) = wd.resistor(i, 47*10^3);
  c1(i) = wd.capacitor_Vout(i, 10*10^-9);
  tree_lowpass = vs1 : wd.series : (r1, c1);
};
//process = no.noise : rcfilter;
//----------------- Vadim Zavalishin's TOPOLOGY PRESERVING TRANSFORM FILTERS ---
// TPT version of the One Pole and SVF Filter by Vadim Zavalishin
// reference : (by Will Pirkle)
// http://www.willpirkle.com/Downloads/AN-4VirtualAnalogFilters.2.0.pdf

// OnePoleTPT filter function
onePoleTPT(cf, x) = loop ~ _ : ! , si.bus(3)
    with {
        g = tan(cf * ma.PI * (1/ma.SR));
        G = g / (1.0 + g);
        loop(s) = u , lp , hp , ap
            with {
                v = (x - s) * G;
                u = v + lp;
                lp = v + s;
                hp = x - lp;
                ap = lp - hp;
            };
    };
// outs
LPTPT(cf, x) = onePoleTPT(cf, x) : (_ , ! , !);
HPTPT(cf, x) = onePoleTPT(cf, x) : (! , _ , !);
// TEST
//import("stdfaust.lib");
//process = no.noise <: LPTPT(1), HPTPT(1000);

// SVFTPT filter function
SVFTPT(K, Q, CF, x) = circuitout : !,!,_,_,_,_,_,_,_,_
    with{
        g = tan(CF * ma.PI / ma.SR);
        R = 1.0 / (2.0 * Q);
        G1 = 1.0 / (1.0 + 2.0 * R * g + g * g);
        G2 = 2.0 * R + g;

        circuit(s1, s2) = u1 , u2 , lp , hp , bp, notch, apf, ubp, peak, bshelf
            with{
                hp = (x - s1 * G2 - s2) * G1;
                v1 = hp * g;
                bp = s1 + v1;
                v2 = bp * g;
                lp = s2 + v2;
                u1 = v1 + bp;
                u2 = v2 + lp;
                notch = x - ((2*R)*bp);
                apf = x - ((4*R)*bp);
                ubp = ((2*R)*bp);
                peak = lp -hp;
                bshelf = x + (((2*K)*R)*bp);
            };
    // choose the output from the SVF Filter (ex. bshelf)
    circuitout = circuit ~ si.bus(2);
    };

// Outs = (lp , hp , bp, notch, apf, ubp, peak, bshelf)
// SVFTPT(K, Q, CF, x) = (Filter-K, Filter-Q, Frequency Cut)

// outs Filters Bank
LPTPTsvf(K, Q, CF, x) = SVFTPT(K, Q, CF, x) : _,!,!,!,!,!,!,!;
HPTPTsvf(K, Q, CF, x) = SVFTPT(K, Q, CF, x) : !,_,!,!,!,!,!,!;
// with bandwidth
BPTPTsvf(K, BW, CF, x) = SVFTPT(K, Q, CF, x*(BW/CF)) : !,!,_,!,!,!,!,!
    with{
        Q = CF / BW;
        };
// TEST
//import("stdfaust.lib");
//process = no.noise : BPTPTsvf(0, 1, 10000);


aa = library("aanl.lib");
sf = library("all.lib");
an = library("analyzers.lib");
ba = library("basics.lib");
co = library("compressors.lib");
de = library("delays.lib");
dm = library("demos.lib");
dx = library("dx7.lib");
en = library("envelopes.lib");
fd = library("fds.lib");
fi = library("filters.lib");
ho = library("hoa.lib");
it = library("interpolators.lib");
ma = library("maths.lib");
mi = library("mi.lib");
ef = library("misceffects.lib");
os = library("oscillators.lib");
no = library("noises.lib");
pf = library("phaflangers.lib");
pl = library("platform.lib");
pm = library("physmodels.lib");
qu = library("quantizers.lib");
rm = library("reducemaps.lib");
re = library("reverbs.lib");
ro = library("routes.lib");
sp = library("spats.lib");
si = library("signals.lib");
so = library("soundfiles.lib");
sy = library("synths.lib");
ve = library("vaeffects.lib");
vl = library("version.lib");
wa = library("webaudio.lib");
wd = library("wdmodels.lib");
