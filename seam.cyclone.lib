// fixdenorm : This operator detects denormal numbers and replaces them with zero.
// Note: As of Max 6.0 the x87 control flags are set to flush to zero and disable
// exception handling in audio processing, so denormal fixing should only be
// required for exported code. A denormal number is a floating point value very
// close to zero (filling the underflow gap). Calculations with denormal values
// can be up to 100 times more expensive, so it is often beneficial to replace
// them with zeroes. Denormals often occur in feedback loops with multipliers,
// such as filters, delays and exponential decays. Denormal detection is based
// on a bitmask. Note that feedback operators in gen~ (delay, history) apply
// fixdenorm to their input signals by default.

declare name "CYclone Faust Library";
declare version "0.1";
declare author "Giuseppe Silvi";
declare license "CC4";

//================================================== GEN~ LIBRARY AND EXAMPLES =
//==============================================================================
//-------------------------------------------------------- CLIP TO MIN ~ MAX ---
clip(a,b) = max(a) : min(b);
//------------------------------------------------------------------------------
// CROSSOVER.gendsp
//------------------------------------------------------------------------------
// A crossover shelf filter that sums to an allpass. This cross over filter
// should have equal phase response. It is useful when used in a spatializer,
// to not distort the final image.
//
// #### Usage
//
// ```
// freq = hslider("Crossover Freq[scale:exp][style:knob]", 600, 1, 20000, 1);
// process = no.noise:lxover;
// ```
//
// Where the four outpust are respectively:
// Front,Right,Rear,Left
//
//
//------------------------------------------------------------------------------
crossover(freq) = _ <: low,hi
with{
	f2rad = (freq*2*ma.PI)/ma.SR;
	// filter coefficients
	ffc = (sin(f2rad)-1) / cos(f2rad); // 1st
	sfc = (ffc+1)/2; // 2nd
	b1(x) = loop~_ : *(ffc), _ : +
	  with{loop = _ <: *(ffc), _ : x-_,_;};
	b2(x) = loop~_ : !,_
	  with{loop = _ <: x-_,_ : *(sfc),_ <:_,!,_+_ <: +,!,_ ;};
    hi = _<:b1-low;
    low = b2:b2;
};

//==============================================================================
//==============================================================================
onepole(fc) = *(a) : +~*(ac)
with{
    a= sin(abs(fc)*2*ma.PI/ma.SR) : clip(0,1);
    ac = 1-a;
};

//==============================================================================
//==============================================================================
delta(x) = x-x'; // Signal of sample differences

//==============================================================================
//==============================================================================
stepcounter = ba.time;
