//############################################################## midside.lib ###
//
// A library for midside stero processing. Its official prefix is `ms`.
//
// * MATRIX
// * PANNING
// *
// *
// *
//
//##############################################################################

/*******************************************************************************
Except where noted otherwise, Copyright (C) 2019-2020 by SEAM

GRAME LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with the GNU C Library; if not, write to the Free Software Foundation, Inc., 59
Temple Place, Suite 330, Boston, MA 02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a larger
FAUST program which directly or indirectly imports this library file and still
distribute the compiled code generated by the FAUST compiler, or a modified
version of this compiled code, under your own copyright and license. This
EXCEPTION TO THE LGPL LICENSE explicitly grants you the right to freely choose
the license for the resulting compiled code. In particular the resulting compiled
code has no obligation to be LGPL or GPL. For example you are free to choose a
commercial or closed source license or any other license if you decide so.
*******************************************************************************/

declare name "Faust MidSide processing Library";
declare version "0.1";

//=================================================================== MATRIX ===
//==============================================================================
//------------------------------------------------------------------------------
// LR TO MID MATRIX
//------------------------------------------------------------------------------
// Converts an LR stereo image into Mid mono signal describes the frontal
// directional component of the sound image.
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : mid : _
// ```
//
// Where the two inputs are respectively:
// L,R
//
// Where the output is the Mid component
//
//------------------------------------------------------------------------------
mid(L,R) = 0.5*(L+R);

//------------------------------------------------------------------------------
// LR TO SIDE MATRIX
//------------------------------------------------------------------------------
// Converts an LR stereo image into Side mono signal describes the lateral
// bidirectional component of the sound image.
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : side : _
// ```
//
// Where the two inputs are respectively:
// L,R
//
// Where the output is the Side component
//
//------------------------------------------------------------------------------
side(L,R) = 0.5*(L-R);

//------------------------------------------------------------------------------
// LR TO MID SIDE MATRIX
//------------------------------------------------------------------------------
// Converts a LR Stereo image into Mid-Side Stereo
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : lr2ms : _,_
// ```
//
// Where the two inputs are respectively:
// L,R
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
lr2ms(L,R) = mid(L,R), side(L,R);

//------------------------------------------------------------------------------
// MID-SIDE TO L MATRIX
//------------------------------------------------------------------------------
// Converts an MidSide stereo image into Left mono signal.
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : left : _
// ```
//
// Where the two inputs are respectively:
// M,S
//
// Where the output is the Left component
//
//------------------------------------------------------------------------------
left(M,S) = 0.5*(M+S);

//------------------------------------------------------------------------------
// MID-SIDE TO R MATRIX
//------------------------------------------------------------------------------
// Converts an MidSide stereo image into Left mono signal.
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : right : _
// ```
//
// Where the two inputs are respectively:
// M,S
//
// Where the output is the Right component
//
//------------------------------------------------------------------------------
right(M,S) = 0.5*(M-S);

//------------------------------------------------------------------------------
// LR TO MID SIDE MATRIX
//------------------------------------------------------------------------------
// Converts a LR Stereo image into Mid-Side Stereo
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : lr2ms : _,_
// ```
//
// Where the two inputs are respectively:
// L,R
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
ms2lr(M,S) = left(M,S), right(M,S);

//------------------------------------------------------------------------------
// NORMALIZED SUM BETWEEN TWO SIGNALS
//------------------------------------------------------------------------------
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : nsum : _
// ```
//
//------------------------------------------------------------------------------
nsum = 0.5*(_+_);

//------------------------------------------------------------------------------
// NORMALIZED DIFFERENCE BETWEEN TWO SIGNALS
//------------------------------------------------------------------------------
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : ndif : _
// ```
//
//------------------------------------------------------------------------------
ndif = 0.5*(_-_);

//------------------------------------------------------------------------------
// BIDIRECTIONAL LR-MS MATRIX
//------------------------------------------------------------------------------
// LR and MS interchange matrix
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : sdmx : _,_
// ```
//
// When the two inputs are LR the outs are MS
//
// When the two inputs are MS the outs are LR
//
//------------------------------------------------------------------------------
sdmx = _,_ <: nsum, ndif;

//================================================================== PANNING ===
//==============================================================================
//------------------------------------------------------------------------------
// MIDSIDE PANNER
//------------------------------------------------------------------------------
// Mid-Side panpot with phase inntegrity of components
//
// #### Reference
//
// #### Usage
//
// ```
// _ : mspan : _,_
// ```
//
// Where the input is the mono signal to be panned
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
mspan(x,pot) = m, s
  with{
    //pot = vslider("[01] Azimuth [style:knob]", 0, -180, 180, 0.1) : deg2rad : si.smoo;
    m = (0.5 * x) + (0.5 * (x * cos(pot)));
    s = x *(sin(-pot));
};

//------------------------------------------------------------------------------
// STEREO PANNING FOR TWO LEFT AND RIGHT LOUDSPEAKER LISTENING
//------------------------------------------------------------------------------
// Mid-Side panpot with phase inntegrity of components to LR matrix
//
// #### Reference
//
// British Patent Specification 394, 325 - ALAN DOWER BLUMLEIN
//
// The invention also consists in a system of sound transmission wherein the
// sound is receive by two or more microphones, wherein at low frequencies
// difference in the phase of sound pressure at the microphone is reproduced as
// difference in volume at the loud speaker
//
// #### Usage
//
// ```
// _ : mspan_lr : _,_
// ```
//
// Where the input is the mono signal to be panned
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
mspan_lr = mspan : sdmx;

//------------------------------------------------------------------------------
// MIDSIDE PANNER
//------------------------------------------------------------------------------
// Mid-Side panpot with phase inntegrity of components
//
// #### Reference
//
// #### Usage
//
// ```
// _ : mspan : _,_
// ```
//
// Where the input is the mono signal to be panned
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
mspanx(x) = m, s
  with{
    pot = vslider("[01] Azimuth [style:knob]", 0, -180, 180, 0.1) : deg2rad : si.smoo;
    m = (0.5 * x) + (0.5 * (x * cos(pot)));
    s = x *(sin(-pot));
};
