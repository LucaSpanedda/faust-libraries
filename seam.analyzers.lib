//########################################################## measurement.lib ###
//
// A library for analise and measure signals. Its official prefix is `me`.
//
// * METERS
// *
// *
// *
// *
//
//##############################################################################

/*******************************************************************************
Except where noted otherwise, Copyright (C) 2019-2020 by SEAM

GRAME LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with the GNU C Library; if not, write to the Free Software Foundation, Inc., 59
Temple Place, Suite 330, Boston, MA 02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a larger
FAUST program which directly or indirectly imports this library file and still
distribute the compiled code generated by the FAUST compiler, or a modified
version of this compiled code, under your own copyright and license. This
EXCEPTION TO THE LGPL LICENSE explicitly grants you the right to freely choose
the license for the resulting compiled code. In particular the resulting compiled
code has no obligation to be LGPL or GPL. For example you are free to choose a
commercial or closed source license or any other license if you decide so.
*******************************************************************************/

declare name "Faust Ambisonic Element Library";
declare version "0.1";
declare author "Giuseppe Silvi";
declare license "CC4";


//================================================================ AMPLITUDE ===
//==============================================================================
//--------------------------------------------------------------- PEAK METERS --
pvmeter(x) = attach(x, an.amp_follower(0.150, x) : ba.linear2db : vbargraph("[90][unit:dB]", -70, +6));
phmeter(x) = attach(x, an.amp_follower(0.150, x) : ba.linear2db : hbargraph("[90][unit:dB]", -70, +6));

//================================================================ FREQUENCY ===
//==============================================================================
// Universal Pitch Tracker
// From faust documentation
upt(a,x) = a*ma.SR / max(M,1) - a * ma.SR * (M == 0)
with{
  // positive zero crossing
  xcr = (x' < 0) & (x >= 0);
  // counts of crossing
  xcnt = +(xcr)~ %(int(a));
  // windows of counts
  wnd = xcr & (xcnt == a);
  // counting samples inside windows
  N = (+(1) : *(1 - wnd)) ~ _;
  // sample and hold the number of cycles
  M = ba.sAndH(N == 0, N' + 1);
};
//a = hslider("n cycles", 1, 1, 100, 1);
ptrack(x,a) = x : fi.dcblockerat(80) : (fi.lowpass(1) : upt(a)) ~ max(100);
//process = ptrack;






//---------------------------------------------------------------- RMS METERS --
//svmeter(x) = attach(x, RMS(1000, x) : ba.linear2db : vbargraph("[90][unit:dB]", -70, +6));
//shmeter(x) = attach(x, RMS(1000, x) : ba.linear2db : hbargraph("[90][unit:dB]", -70, +6));

//================================================================= LOUDNESS ===
//==============================================================================
//------------------------------------------------------------------------------
// RMS - ROOT MEAN SQUARE
//------------------------------------------------------------------------------
//RMS(n) = ba.slidingRMSn(n,1024);

//------------------------------------------------------------------------------
// BS1770
//------------------------------------------------------------------------------
// Converts an LR stereo image into Mid mono signal describes the frontal
// directional component of the sound image.
//
// #### Reference
//
// #### Usage
//
// ```
// _,_ : mid : _
// ```
//
// Where the two inputs are respectively:
// L,R
//
// Where the output is the Mid component
//
//------------------------------------------------------------------------------
// pfs1 = fi.highshelf(2,4,1100);
// pfs2 = fi.highpass(2,55);
// tg = ba.sec2samp(0.400);
//
// bs1770 = pfs1 : pfs2 <: _ , int(@(0.75*tg)) : 0.5*(RMS(tg)+RMS(tg));
