import("stdfaust.lib");

// The output consists of samples that are the difference between
// the current input sample and the previous input sample.
// For example, if the input signal contained 1,.5,2,.5,
// the output would be 1,-.5,1.5,-1.5.

delta(x) = x - x'; // Signal of sample differences

stepcounter = ba.time;

rampsmooth(rampup, rampdown) = _ : ba.time
	with {
		rampup = max(x, 1);
		rampdown = max(x, 1);

		delta(x) = x - x'; // Signal of sample differences

		ba.if (
			(delta(x) == 0) & (delta(rampup) == 0) & (delta(rampdown) == 0),
			ba.time(x),
			ba.time(x)
			);
	};

	//
	//
	// linetilde (value, time) = state~(_,_):!,_
	// 	with {
	// 		state (t, c) = nt, ba.if (nt <= 0, value, c+(value - c) / nt)
	// 		with {
	// 			nt = ba.if( value != value', samples, t-1);
	// 			samples = time*ma.SR/1000.0;
	// 		};
	// 	};




  History last(0.);
  History dirflag(0);
  History stepcounter(0);
  History increment(0.);

  // deltavar = 0;
  // non serve dichiararlo perché viene inizializzato nell'else

  insig = in1;
  rampup = max(in2, 1);
  rampdown = max(in3, 1);
  outsig = last;

  // se il delta è uguale a 0 e non ci sono modifiche ai tempi di rampsmooth
  // si procede con il precedente incremento
  if((delta(insig) == 0) && (delta(rampup)==0) && (delta(rampdown)==0)) {
  	if (dirflag > 0) {
  		if (stepcounter < rampup) {
  			outsig += increment;
  			stepcounter += 1;
  		} else { outsig = insig; }
  	} else if (stepcounter < rampdown) {
  			outsig += increment;
  			stepcounter += 1;
  	} else { outsig = insig; }

  }
  // altrimenti si verifica se il segnale deve salire o scendere
  // e si incrementa opportunamente
  // outsig rappresenta l'uscita precedente
  else {
  	deltavar = insig - outsig;
  	if (deltavar > 0) {
  		increment = deltavar / rampup;
  		outsig += increment;
  		stepcounter = 1;
  		dirflag = 1;

  	} else {
  		increment = deltavar / rampdown;
  		outsig += increment;
  		stepcounter = 1;
  		dirflag = -1;
  		}
  }

  last = outsig;
  out = outsig;
