//############################################################## cyclone.lib ###
//
// A library for the exploration of maxmsp algorythms
//
// * gen~ library and examples
// *
// *
// *
// *
//
//##############################################################################

/*******************************************************************************
Except where noted otherwise, Copyright (C) 2019-2020 by SEAM

GRAME LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with the GNU C Library; if not, write to the Free Software Foundation, Inc., 59
Temple Place, Suite 330, Boston, MA 02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a larger
FAUST program which directly or indirectly imports this library file and still
distribute the compiled code generated by the FAUST compiler, or a modified
version of this compiled code, under your own copyright and license. This
EXCEPTION TO THE LGPL LICENSE explicitly grants you the right to freely choose
the license for the resulting compiled code. In particular the resulting compiled
code has no obligation to be LGPL or GPL. For example you are free to choose a
commercial or closed source license or any other license if you decide so.
*******************************************************************************/

declare name "CYclone Faust Library";
declare version "0.1";
declare author "Giuseppe Silvi";
declare license "CC4";

//================================================== GEN~ LIBRARY AND EXAMPLES =
//==============================================================================
//------------------------------------------------------------------------------
// CROSSOVER.gendsp
//------------------------------------------------------------------------------
// A crossover shelf filter that sums to an allpass. This cross over filter
// should have equal phase response. It is useful when used in a spatializer,
// to not distort the final image.
//
// #### Usage
//
// ```
// freq = hslider("Crossover Freq[scale:exp][style:knob]", 600, 1, 20000, 1);
// process = no.noise:lxover;
// ```
//
// Where the four outpust are respectively:
// Front,Right,Rear,Left
//
//
//------------------------------------------------------------------------------
crossover(freq) = _ <: low,hi
with{
	f2rad = (freq*2*ma.PI)/ma.SR;
	// filter coefficients
	ffc = (sin(f2rad)-1) / cos(f2rad); // 1st
	sfc = (ffc+1)/2; // 2nd
	b1(x) = loop~_ : *(ffc), _ : +
	  with{loop = _ <: *(ffc), _ : x-_,_;};
	b2(x) = loop~_ : !,_
	  with{loop = _ <: x-_,_ : *(sfc),_ <:_,!,_+_ <: +,!,_ ;};
    hi = _<:b1-low;
    low = b2:b2;
};

//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//============================================================== SCRATCH BOOK ==
//==============================================================================

// The output consists of samples that are the difference between
// the current input sample and the previous input sample.
// For example, if the input signal contained 1,.5,2,.5,
// the output would be 1,-.5,1.5,-1.5.

delta(x) = x - x'; // Signal of sample differences

stepcounter = ba.time;

rampsmooth(rampup, rampdown) = _ : ba.time
	with {
		rampup = max(x, 1);
		rampdown = max(x, 1);

		delta(x) = x - x'; // Signal of sample differences

		ba.if (
			(delta(x) == 0) & (delta(rampup) == 0) & (delta(rampdown) == 0),
			ba.time(x),
			ba.time(x)
			);
	};

	//
	//
	// linetilde (value, time) = state~(_,_):!,_
	// 	with {
	// 		state (t, c) = nt, ba.if (nt <= 0, value, c+(value - c) / nt)
	// 		with {
	// 			nt = ba.if( value != value', samples, t-1);
	// 			samples = time*ma.SR/1000.0;
	// 		};
	// 	};




  History last(0.);
  History dirflag(0);
  History stepcounter(0);
  History increment(0.);

  // deltavar = 0;
  // non serve dichiararlo perché viene inizializzato nell'else

  insig = in1;
  rampup = max(in2, 1);
  rampdown = max(in3, 1);
  outsig = last;

  // se il delta è uguale a 0 e non ci sono modifiche ai tempi di rampsmooth
  // si procede con il precedente incremento
  if((delta(insig) == 0) && (delta(rampup)==0) && (delta(rampdown)==0)) {
  	if (dirflag > 0) {
  		if (stepcounter < rampup) {
  			outsig += increment;
  			stepcounter += 1;
  		} else { outsig = insig; }
  	} else if (stepcounter < rampdown) {
  			outsig += increment;
  			stepcounter += 1;
  	} else { outsig = insig; }

  }
  // altrimenti si verifica se il segnale deve salire o scendere
  // e si incrementa opportunamente
  // outsig rappresenta l'uscita precedente
  else {
  	deltavar = insig - outsig;
  	if (deltavar > 0) {
  		increment = deltavar / rampup;
  		outsig += increment;
  		stepcounter = 1;
  		dirflag = 1;

  	} else {
  		increment = deltavar / rampdown;
  		outsig += increment;
  		stepcounter = 1;
  		dirflag = -1;
  		}
  }

  last = outsig;
  out = outsig;
