sre = library("seam.reverbs.lib");
ma = library("maths.lib");
de = library("delays.lib");

// -----------------------------------------------------------------------------
// SCHROEDER NATURAL SOUNDING REVERBS - 1962

// delay feedback in loop
dfl(t,g) = (+ : @(t))~*(g);
//process = dfl(1,0.5);

// correct delay feedback in loop
dflc(t,g) = (+ : @(t-1))~*(g) : mem;
//process = dfl(1,0.5);

// correct delay feedback in loop complex
dflcc(t,g) = (+ : de.delay(ma.SR/2, int(t-1)))~*(max(0, min(0.999, g))) : mem;
//process = dfl(1,0.5);

// all-pass filter
apf(t,g) = _ <: (_ * (ma.neg(max(0, min(0.999, g))))) + (dflcc(t,g) * (1-(g*g)));
//process = os.impulse : apf(1,0.5);

schrev = _ <: // to 4 parallel comb
  dflc(4133,0.708), dflc(4157,0.708), dflc(7307,0.708), dflc(2803,0.708) :>
  alp(307,0.708) : alp(881,0.708); // and a sequence of two allpass

revsch = alp(307,0.708) : alp(881,0.708) <: // two allpass to 4 comb
  dflc(4133,0.708), dflc(4157,0.708), dflc(7307,0.708), dflc(2803,0.708);

// commutability test
//process = os.impulse <: schrev, (revsch :> _);

matrix = alp(47,0.708), alp(41,0.708), alp(31,0.708), alp(23,0.708),
         alp(17,0.708), alp(11,0.708), alp(5,0.708), alp(2,0.708),
         alp(3,0.708), alp(7,0.708), alp(13,0.708), alp(19,0.708),
         alp(29,0.708), alp(37,0.708), alp(43,0.708), alp(53,0.708);

ambiorev = revsch <: par(i, 4, _<:_,ma.neg(_)) : matrix;

// -----------------------------------------------------------------------------
// MOORER - SIGNAL PROCESSING ASPECTS OF COMPUTER MUSIC - A SURVEY - 1977

jmcomb(d,g) = + ~ @(d-1)*(g);
jmcosc(d,g,theta) = + ~ (@(d-1) <: *(2*g*(cos(theta))) + @(d)*(ma.neg(g*g)));
//process = os.impulse : jmcosc(1,0.708,a);

jmapf(d,g) = (+ <: @(d-1), *(-g)) ~ *(g) : mem , _ : +;
//process = os.impulse : jmapf(1,0.9);

jmapfosc(d,g,theta) = (+ <: z1(d,g,theta), *(g*g) : @(d-1),_,_)~*(ma.neg(g*g)) : mem,_,_:> _
with{
    z1(d,g,theta) = (+ : @(d-1)) ~ *(2*g*cos(theta)) : (mem <: _,*(ma.neg(2*g*cos(theta))));
};
//process = os.impulse : jmapfosc (1,1,a) * (0.03);
// process = os.impulse <: jmcombosc(1,1,a) * (0.03), jmapfosc(1,1,a) * (0.03);

// -----------------------------------------------------------------------------
// FAUST LIBRARIES - CARGO CALL
an = library("analyzers.lib");
ba = library("basics.lib");
co = library("compressors.lib");
de = library("delays.lib");
dm = library("demos.lib");
dx = library("dx7.lib");
en = library("envelopes.lib");
fi = library("filters.lib");
ho = library("hoa.lib");
it = library("interpolators.lib");
ma = library("maths.lib");
mi = library("mi.lib");
ef = library("misceffects.lib");
os = library("oscillators.lib");
no = library("noises.lib");
pf = library("phaflangers.lib");
pl = library("platform.lib");
pm = library("physmodels.lib");
rm = library("reducemaps.lib");
re = library("reverbs.lib");
ro = library("routes.lib");
sp = library("spats.lib");
si = library("signals.lib");
so = library("soundfiles.lib");
sy = library("synths.lib");
ve = library("vaeffects.lib");
wa = library("webaudio.lib");
sf = library("all.lib");
vl = library("version.lib");
